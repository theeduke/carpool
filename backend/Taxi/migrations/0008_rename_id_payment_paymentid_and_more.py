# Generated by Django 5.1.4 on 2025-04-07 10:53

from django.db import migrations, models
from django.db import transaction

# #  Step 1: Define the location lookup dictionary
# LOCATION_LOOKUP = {
#     "town": {"label": "town", "lat": -1.28, "lng": 36.82},
#     "kajiado": {"label": "kajiado", "lat": -1.41, "lng": 36.95},
#     "karen": {"label": "karen", "lat": -1.32, "lng": 36.72},
#     "mandera": {"label": "mandera", "lat": 3.94, "lng": 41.87},
#     "nairobi": {"label": "nairobi", "lat": -1.286389, "lng": 36.817223},
#     # Add any other places used in existing data
# }


# def migrate_existing_locations(apps, schema_editor):
#     CarpoolRide = apps.get_model('Taxi', 'CarpoolRide')
#     with transaction.atomic():
#         for ride in CarpoolRide.objects.all():
#             try:
#                 # Strip and lower case the origin and destination names
#                 origin_name = ride.origin.strip().lower() if ride.origin else None
#                 destination_name = ride.destination.strip().lower() if ride.destination else None

#                 # Update origin and destination if they are in the lookup dictionary
#                 if origin_name in LOCATION_LOOKUP:
#                     ride.origin = LOCATION_LOOKUP[origin_name]
#                 else:
#                     ride.origin = None  # or keep it as is

#                 if destination_name in LOCATION_LOOKUP:
#                     ride.destination = LOCATION_LOOKUP[destination_name]
#                 else:
#                     ride.destination = None  # or keep it as is

#                 ride.save()
#                 print(f"Updated ride {ride.pk}")
#             except Exception as e:
#                 print(f"Error updating ride {ride.pk}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('Taxi', '0007_rename_id_userwallet_userwalletid_and_more'),
    ]

    operations = [
        migrations.RenameField(
            model_name='payment',
            old_name='id',
            new_name='paymentid',
        ),
        migrations.RenameField(
            model_name='vehicle',
            old_name='id',
            new_name='vehicleid',
        ),
        migrations.AlterField(
            model_name='carpoolride',
            name='destination',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='carpoolride',
            name='origin',
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name='riderequest',
            name='dropoff_location',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='riderequest',
            name='pickup_location',
            field=models.JSONField(),
        ),
    ]

# Generated by Django 5.1.4 on 2025-04-07 10:53

# from django.db import migrations, models
# from django.db import transaction


# # Step 1: Define the location lookup dictionary
# LOCATION_LOOKUP = {
#     "town": {"label": "town", "lat": -1.28, "lng": 36.82},
#     "kajiado": {"label": "kajiado", "lat": -1.41, "lng": 36.95},
#     "karen": {"label": "karen", "lat": -1.32, "lng": 36.72},
#     "mandera": {"label": "mandera", "lat": 3.94, "lng": 41.87},
#     "nairobi": {"label": "nairobi", "lat": -1.286389, "lng": 36.817223},
#     # Add any other places used in existing data
# }


# def migrate_existing_locations(apps, schema_editor):
#     CarpoolRide = apps.get_model('Taxi', 'CarpoolRide')
#     with transaction.atomic():
#         for ride in CarpoolRide.objects.all():
#             try:
#                 # Strip and lower case the origin and destination names
#                 origin_name = ride.origin.strip().lower() if ride.origin else None
#                 destination_name = ride.destination.strip().lower() if ride.destination else None

#                 # Initialize valid JSON objects
#                 ride.origin = None
#                 ride.destination = None

#                 # Update origin if it exists in the lookup dictionary
#                 if origin_name in LOCATION_LOOKUP:
#                     ride.origin = LOCATION_LOOKUP[origin_name]
#                 # Optionally handle cases where the origin name is unknown
#                 else:
#                     print(f"Unknown origin: {origin_name} for ride {ride.pk}")

#                 # Update destination if it exists in the lookup dictionary
#                 if destination_name in LOCATION_LOOKUP:
#                     ride.destination = LOCATION_LOOKUP[destination_name]
#                 # Optionally handle cases where the destination name is unknown
#                 else:
#                     print(f"Unknown destination: {destination_name} for ride {ride.pk}")

#                 ride.save()
#                 print(f"Updated ride {ride.pk}")
#             except Exception as e:
#                 print(f"Error updating ride {ride.pk}: {e}")


# class Migration(migrations.Migration):

#     dependencies = [
#         ('Taxi', '0007_rename_id_userwallet_userwalletid_and_more'),
#     ]

#     operations = [
#         migrations.RunPython(migrate_existing_locations),
#         migrations.RenameField(
#             model_name='payment',
#             old_name='id',
#             new_name='paymentid',
#         ),
#         migrations.RenameField(
#             model_name='vehicle',
#             old_name='id',
#             new_name='vehicleid',
#         ),
#         migrations.AlterField(
#             model_name='carpoolride',
#             name='destination',
#             field=models.JSONField(),
#         ),
#         migrations.AlterField(
#             model_name='carpoolride',
#             name='origin',
#             field=models.JSONField(),
#         ),
#         migrations.AlterField(
#             model_name='riderequest',
#             name='dropoff_location',
#             field=models.JSONField(blank=True, null=True),
#         ),
#         migrations.AlterField(
#             model_name='riderequest',
#             name='pickup_location',
#             field=models.JSONField(),
#         ),
#     ]
