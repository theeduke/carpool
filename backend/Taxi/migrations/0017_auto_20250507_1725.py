# Generated by Django 5.1.4 on 2025-05-08 00:25

from django.db import migrations, IntegrityError
import uuid

def populate_vehicle_data(apps, schema_editor):
    VehicleMake = apps.get_model('Taxi', 'VehicleMake')
    VehicleModel = apps.get_model('Taxi', 'VehicleModel')

    # Sample data for makes and models
    makes = [
        {"name": "Toyota", "models": ["Corolla", "Camry", "Rav4", "Prius", "Yaris"]},
        {"name": "Nissan", "models": ["Note", "Sentra", "X-Trail", "Juke", "Leaf"]},
        {"name": "Honda", "models": ["Civic", "Accord", "CR-V", "Fit", "HR-V"]},
        {"name": "Hyundai", "models": ["Tucson", "Elantra", "Santa Fe", "Kona", "Ioniq"]},
        {"name": "Ford", "models": ["Focus", "Escape", "Explorer", "F-150", "Mustang"]},
    ]

    for make_data in makes:
        # Create or get the make
        make, created = VehicleMake.objects.get_or_create(
            name=make_data["name"],
            defaults={'make_id': uuid.uuid4()}
        )
        if created:
            print(f"Created VehicleMake: {make.name} (make_id: {make.make_id})")

        # Create models for the make
        for model_name in make_data["models"]:
            model, created = VehicleModel.objects.get_or_create(
                make=make,
                name=model_name,
                defaults={'model_id': uuid.uuid4()}
            )
            if created:
                print(f"Created VehicleModel: {make.name} {model_name} (model_id: {model.model_id})")

def reverse_populate_vehicle_data(apps, schema_editor):
    # Remove data if the migration is reversed, but check for dependencies
    VehicleMake = apps.get_model('Taxi', 'VehicleMake')
    VehicleModel = apps.get_model('Taxi', 'VehicleModel')
    
    try:
        VehicleModel.objects.all().delete()
        VehicleMake.objects.all().delete()
        print("Successfully deleted all VehicleMake and VehicleModel records.")
    except IntegrityError as e:
        print(f"Warning: Could not delete VehicleMake/Model records due to dependencies: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('Taxi', '0016_vehiclemake_vehicle_color_vehicle_vehicle_photo_and_more'),
    ]

    operations = [
        migrations.RunPython(
            code=populate_vehicle_data,
            reverse_code=reverse_populate_vehicle_data
        ),
    ]
